{"version":3,"sources":["cog.svg","MainMap.jsx","useWindowResize.js","index.js"],"names":["MainMap","useState","width","undefined","height","windowSize","setWindowSize","useEffect","resize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowResize","selectedPoint","setSelectedPoint","selectedColor","setSelectedColor","focusedLine","setFocusedLine","selectedLanguage","setSelectedLanguage","zoomRatio","setZoomRatio","METRO","TRAM","BUS","displayFilters","setDisplayFilters","x","y","mousePos","setMousePos","vH","vW","networkDescription","NETWORK_DESCRIPTION","forEach","line","i","find","lineId","push","color","className","style","top","left","name","type","backgroundColor","padding","fontSize","display","borderRadius","points","length","alt","src","Cog","Object","entries","map","value","htmlFor","id","checked","onChange","e","target","min","max","step","xmlns","viewBox","iLine","point","lngN","latN","join","fill","strokeWidth","stroke","onClick","p","cx","cy","r","onMouseEnter","clientX","scrollX","clientY","scrollY","onMouseLeave","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de823abf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cog.4951978d.svg\";","import { useState } from 'react'\n\nimport './MainMap.css'\nimport Cog from './cog.svg'\n\nimport NETWORK_DESCRIPTION from './network_description.json'\nimport useWindowResize from './useWindowResize'\n\nconst MainMap = () => {\n  const {height, width} = useWindowResize()\n  const [selectedPoint, setSelectedPoint] = useState({})\n  const [selectedColor, setSelectedColor] = useState('transparent')\n  const [focusedLine, setFocusedLine] = useState({})\n  const [selectedLanguage, setSelectedLanguage] = useState('fr')\n  const [zoomRatio, setZoomRatio] = useState(1)\n\n  const [displayFilters, setDisplayFilters] = useState({\n    METRO: true,\n    TRAM: true,\n    BUS: false,\n  })\n  const [mousePos, setMousePos] = useState({x: null, y:null})\n\n  const vH = height * zoomRatio * 0.95 | 0\n  const vW = width * zoomRatio * 0.95 | 0\n  const vbW = 1000\n  const vbH = 850\n\n  const networkDescription = []\n  NETWORK_DESCRIPTION.forEach((line, i) => {\n    if(!networkDescription.find(x => line.lineId === x.lineId))\n      networkDescription.push({\n        ...line,\n        color: `hsl(${(i * 13) % 360}, ${40 + (i * 2 % 40)}%, ${40 + (i * 2 % 25)}%)`\n      })\n  })\n  \n  return (\n  <main>\n    {\n      (mousePos.x && mousePos.y) && \n      <aside className=\"legend\" style={{\n        color: selectedColor,\n        top: mousePos.y + 15,\n        left: mousePos.x + 15,\n      }}>\n        <div className=\"txt\">\n          {selectedPoint?.name[selectedLanguage]}\n        </div>\n      </aside>\n    }\n\n    { focusedLine.lineId !== undefined && \n    <aside className=\"focusedline\">\n      <div style={{color: focusedLine.color}}>\n        {focusedLine.type} <div style={{\n          backgroundColor: focusedLine.color,\n          padding: 8,\n          fontSize: '120%',\n          color: '#222',\n          display: 'inline-block',\n          borderRadius: 5\n        }}>{focusedLine.lineId}</div>\n        <div style={{fontSize: '60%', padding: 10}}>\n          {focusedLine.points[0].name[selectedLanguage]} - {focusedLine.points[focusedLine.points.length - 1].name[selectedLanguage]}\n        </div>\n      </div>\n    </aside>\n    }\n\n    <section className=\"options\">\n      <header>\n        <img alt=\"\" src={Cog} height=\"25\" width=\"25\" /> Settings\n      </header>\n\n      <fieldset>\n        {\n          Object.entries(displayFilters).map(([name, value]) => (\n          <div className=\"checkgroup\" key={name}>\n            <label htmlFor={`filter-${name}`}>{name}</label>\n            <input id={`filter-${name}`} type=\"checkbox\" checked={value} onChange={() => {\n              setDisplayFilters({\n                ...displayFilters,\n                [name]: !value\n              })\n            }} />\n          </div>\n          ))\n        }\n      </fieldset>\n      \n      <fieldset>\n        <label htmlFor=\"option-lang\">\n          Stops name\n        </label>\n\n        <select onChange={e => setSelectedLanguage(e.target.value)} id=\"option-lang\">\n          <option value=\"fr\">French</option>\n          <option value=\"nl\">Dutch</option>\n        </select>\n      </fieldset>\n\n      <fieldset>\n        <input type=\"range\" \n               id=\"\" \n               onChange={e => setZoomRatio(e.target.value)} \n               min=\"1\" \n               max=\"3\" \n               step=\"0.25\" \n               value={zoomRatio} />\n      </fieldset>\n    </section>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" \n         height={vH} \n         width={vW}\n         viewBox={`0 0 ${vbW} ${vbH}`}>\n      {\n        networkDescription.map((line, iLine) => {\n        if(!displayFilters[line.type])\n          return null\n        \n        const points = line.points.map(point => ({\n          ...point, \n          x: point.lngN * vbW,\n          y: point.latN * vbH,\n        }))\n\n        return (\n        <g key={line.lineId} id={`L${line.lineId}`} className={\n          focusedLine.lineId === line.lineId ? '' : 'hide' \n        }>\n          <polyline points={points.map(({x, y}) => (`${x} ${y}`)).join(', ') }\n                    fill=\"none\"\n                    strokeWidth=\"6\"\n                    stroke={line.color}\n                    onClick={() => setFocusedLine(line)} />\n          {\n            points.map(p => \n              <circle cx={p.x} \n                      cy={p.y} \n                      r={8} \n                      stroke=\"#222\"\n                      strokeWidth=\"3\"\n                      fill={line.color} \n                      key={p.id}\n                      onMouseEnter={(e) => {\n                          setSelectedPoint(p)\n                          setSelectedColor(line.color)\n                          setMousePos({x: e.clientX + window.scrollX, y: e.clientY + window.scrollY})\n                      }}\n                      onMouseLeave={() => {\n                        setMousePos({x: null, y: null})\n                      }}\n                      onClick={() => setFocusedLine(line)} />\n            )\n          }\n        </g>\n        )})\n      }\n    </svg>\n  </main>\n  )\n}\n\nexport default MainMap","import { useEffect, useState } from \"react\"\n\nexport default function useWindowResize(){\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  })\n\n\n  useEffect(() => {\n    const resize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      })\n    }\n\n    window.addEventListener(\"resize\", resize)\n\n    resize()\n    return () => window.removeEventListener(\"resize\", resize)\n  }, []) \n\n  return windowSize\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './reset.css'\n\nimport MainMap from './MainMap.jsx'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainMap />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}